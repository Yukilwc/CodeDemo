package leetcode

// 给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。
// 请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。
// 注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。

// 示例 1：

// 输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
// 输出：[1,2,2,3,5,6]
// 解释：需要合并 [1,2,3] 和 [2,5,6] 。
// 合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。

// 思路
// 这里是考虑3个索引，m，n，m+n-1
// m+n-1是控制要填入的最终数字，m和n是各自的数组控制索引，确定一个后，可以-1
// 非递减顺序，意味着只要从最后开始遍历，其比较后，总会是最大值
func merge(nums1 []int, m int, nums2 []int, n int) {
	for {
		if m > 0 && n > 0 {
			// 两个索引都大于0，都还没用完，则继续
		} else {
			// 有一个已经用完了，结束循环
			break
		}
		if nums1[m-1] < nums2[n-1] {
			nums1[m+n-1] = nums2[n-1]
			n = n - 1
		} else {
			nums1[m+n-1] = nums1[m-1]
			m = m - 1
		}

	}
	if m == 0 && n > 0 {
		// n没用完，m已经用完了
		// 也就是m都已经挪动到了后面位置
		// 继续把剩余的n全都挪过来
		for i := 0; i < n; i++ {
			nums1[i] = nums2[i]
		}
	}
	// n用完了，已经移动完成
	// 那么剩下的就是合并完成的

}
